// backend/controllers/conversationController.js
const Conversation = require('../models/conversationModel');
const Message = require('../models/messageModel');
const User = require('../models/userModel'); // Pour peupler les informations de l'exp√©diteur

// @desc    Cr√©er ou r√©cup√©rer une conversation entre deux utilisateurs
// @route   POST /api/conversations
// @access  Private
exports.createOrGetConversation = async (req, res) => {
  try {
    const { recipientId } = req.body;
    const senderId = req.user.id; // L'ID de l'utilisateur connect√© (celui qui initie)

    // Assurez-vous que l'exp√©diteur n'essaie pas de converser avec lui-m√™me
    if (senderId === recipientId) {
      return res.status(400).json({ message: "Vous ne pouvez pas d√©marrer une conversation avec vous-m√™me." });
    }

    // V√©rifier si une conversation existe d√©j√† entre ces deux participants
    let conversation = await Conversation.findOne({
      participants: { $all: [senderId, recipientId] }
    });

    if (conversation) {
      // Si la conversation existe, on la retourne
      // Optionnel: Mettre √† jour 'updatedAt' m√™me si aucun message n'est envoy√©, pour la faire remonter
      conversation.updatedAt = Date.now();
      await conversation.save();
      return res.status(200).json(conversation);
    }

    // Si aucune conversation n'existe, on en cr√©e une nouvelle
    conversation = new Conversation({
      participants: [senderId, recipientId]
    });

    await conversation.save();
    res.status(201).json(conversation);
  } catch (error) {
    console.error("Erreur lors de la cr√©ation/r√©cup√©ration de la conversation:", error);
    res.status(500).json({ message: "Erreur serveur lors de la cr√©ation/r√©cup√©ration de la conversation." });
  }
};

// @desc    R√©cup√©rer toutes les conversations de l'utilisateur connect√©
// @route   GET /api/conversations/mine
// @access  Private
exports.getConversationsForUser = async (req, res) => {
  try {
    const userId = req.user.id;
    const conversations = await Conversation.find({ participants: userId })
      .populate('participants', 'username role profilePicture') // Ajoutez profilePicture ici
      .populate('lastMessage') // üö® AJOUTEZ CELA pour populer le message complet
      .sort({ updatedAt: -1 });

    res.status(200).json(conversations);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des conversations:", error);
    res.status(500).json({ message: "Erreur serveur lors de la r√©cup√©ration des conversations." });
  }
};
// @desc    R√©cup√©rer une conversation sp√©cifique par son ID
// @route   GET /api/conversations/:id
// @access  Private
exports.getConversationById = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id;

    const conversation = await Conversation.findById(id).populate('participants', 'username role profilePicture'); // <-- Standardis√© √† 'profilePicture'

    if (!conversation) {
      return res.status(404).json({ message: 'Conversation non trouv√©e.' });
    }

    // V√©rifier que l'utilisateur est bien un participant de cette conversation
    if (!conversation.participants.some(p => p._id.toString() === userId.toString())) {
      return res.status(403).json({ message: 'Acc√®s refus√©. Vous n\'√™tes pas autoris√© √† voir cette conversation.' });
    }

    res.status(200).json(conversation);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration de la conversation par ID:", error);
    res.status(500).json({ message: "Erreur serveur lors de la r√©cup√©ration de la conversation." });
  }
};

// @desc    R√©cup√©rer tous les messages d'une conversation sp√©cifique
// @route   GET /api/conversations/:conversationId/messages
// @access  Private
exports.getMessagesInConversation = async (req, res) => {
  try {
    const { conversationId } = req.params;
    const userId = req.user.id; // L'ID de l'utilisateur connect√©

    // V√©rifier que la conversation existe et que l'utilisateur est un participant
    const conversation = await Conversation.findById(conversationId);
    if (!conversation) {
      return res.status(404).json({ message: 'Conversation non trouv√©e.' });
    }
    // Convertir l'ID de l'utilisateur en cha√Æne pour la comparaison
    if (!conversation.participants.map(p => p.toString()).includes(userId.toString())) {
      return res.status(403).json({ message: 'Acc√®s refus√©. Vous n\'√™tes pas autoris√© √† voir cette conversation.' });
    }

    const messages = await Message.find({ conversation: conversationId })
      .populate('senderId', 'username profilePicture') // <-- Standardis√© √† 'profilePicture'
      .sort({ createdAt: 1 }); // Tri√©s par ordre chronologique

    // Optionnel: Marquer les messages comme lus par l'utilisateur qui les r√©cup√®re
    await Message.updateMany(
      {
        conversation: conversationId,
        senderId: { $ne: userId }, // Ne pas marquer ses propres messages
        readBy: { $ne: userId } // Seulement si l'utilisateur ne l'a pas d√©j√† lu
      },
      { $addToSet: { readBy: userId } }
    );

    res.status(200).json(messages);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des messages:", error);
    res.status(500).json({ message: "Erreur serveur lors de la r√©cup√©ration des messages." });
  }
};

// üö®üö®üö® CETTE FONCTION EST SUPPRIM√âE DE CE FICHIER üö®üö®üö®
// exports.sendMessage = ...